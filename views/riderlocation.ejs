<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plan your journey</title>
    <link rel="stylesheet" href="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/maps/maps.css">
    <style>
        
        h1 {
    color: black;
    padding: 15px;
    text-align: center;
}

h2 {
    color: white;
    background-color: black;
    padding: 15px;
    text-align: center;
}

body {
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
}

.topnav {
    overflow: hidden;
    background-color: black;
    margin-inline: 22px;
    margin-top: 2px;
    position: fixed;
    width: calc(100% - 44px);
    height:  44px;
    top: 0;
    z-index: 1000;
    border: 9px solid black;  
}

.topnav a {
    float: left;
    color: silver;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 17px;
}

.topnav a.active {
    background-color: black;
    color: silver;
}
.left img {
            margin-top: -11px;
            width: 100%;
            align-items: left;
        }
    .content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 20px;
    margin-top: 70px;
        
    }
    .container {
    
        width: 300px;
        padding: 20px 15px;
        background-color: silver;
        border-radius: 4px;
        box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);
        margin: 20px;
    }
    .form-group {
        margin-bottom: 20px;
    }
    label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }
    input {
        height: 40px;
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }
    input:focus {
        border-color: black;
        border-bottom-width: 2px;
    }
    button {
        width: 100%;
        background: none;
        font-size: 18px;
        font-weight: 500;
        background-color: black;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        box-sizing: border-box;
    }
    .back-link {
        display: block;
        margin-top: 10px;
        color: black;
        text-decoration: none;
        text-align: center;
    }
    #map {
        height: 500px;
        flex: 1;
        margin: 20px;
        
    }
    .result-box ul {
        list-style-type: none;
        padding: 0;
    }
    .result-box li {
        padding: 5px;
        cursor: pointer;
    }
    .result-box li:hover {
        background-color: #f0f0f0;
    }

        #carPopup {
        
            position: fixed;
            display: none;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background-color:transparent;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            z-index: 1000;
        }
        #overlay {
        
            position: fixed;
            display: none;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 999;
        }
        #map {
            width: 100%;
            height: 500px;
        }
    </style>
    </head>
    <body>
    <div class="content">
        <div class="container">
            <form name="myform" id="routeForm" action="/riderlocation" method="post" >
                <h2>Get a ride</h2>
                <div class="form-group">
                    <input type="text" placeholder="Pickup location" id="pickupInput" name="pickupCoordinates" required autocomplete="off" ><br><br>
 
                    <input type="text" placeholder="Dropoff location" id="dropoffInput" name="dropoff" required autocomplete="off"><br><br>
                    <button type="submit">Request for ride</button>
                    <div class="result-box" id="pickupResultBox"></div>
                    <div class="result-box" id="dropoffResultBox"></div>
                </div>
            </form>
         
        </div>
        <div id="map"></div>
        <div id="overlay"></div>
        <div id="carPopup">
            <h2>Find Your Drivers</h2>
            <ul id="carList"></ul>
            <button onclick="closePopup()">submit</button>
        </div>
    </div>

    <script src="/autosearch.js"></script>
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/maps/maps-web.min.js"></script>
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/services/services-web.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js"
            integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- <div id="map"></div> -->

    <script>
        
        
const apiKey = "<%=TOMTOM_API_KEY%>"  
// const findNearByDriver= "<%=findNearByDriver%>"


      
        console.log({apiKey});
      
        const map = tt.map({
            key: apiKey,
            container: "map",
            center: [77.2090, 28.6139], 
            zoom:13 ,
        });

        
        let  passengerMarker, routeLayer;

        function createMarker(coordinates, popupText) {
            console.log("createMarker");
            const element = document.createElement('div');
            element.innerHTML=`<img src='data:image/jpeg; style='width: 30px; height: 30px; background-color:black'>`
            const marker = new tt.Marker({ element: element }).setLngLat(coordinates);
            const popup = new tt.Popup({ offset: 30 }).setHTML(popupText);
            marker.setPopup(popup);
            marker.addTo(map);
            return marker;
        }

        document.getElementById('routeForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const pickupInput = document.getElementById('pickupInput').value;
            const dropoffInput = document.getElementById('dropoffInput').value;
            console.log(pickupInput, "pickup input");
            console.log(dropoffInput, "drop input");

            const pickupCoordinates = await getCoordinates(pickupInput);
            console.log(pickupCoordinates, "pickup");

            const dropoffCoordinates = await getCoordinates(dropoffInput);
            console.log(dropoffCoordinates, "drop");

            map.flyTo({
                center: pickupCoordinates,
                essential: true
            });

            if (passengerMarker) {
                passengerMarker.remove();
            }
            passengerMarker = createMarker(pickupCoordinates, "Pickup Location");
            console.log(4);
            createMarker(dropoffCoordinates, "Dropoff Location");
            console.log(5);
            calculateRoute(pickupCoordinates, dropoffCoordinates);
            await sendLocation(pickupCoordinates);
        });

        async function calculateRoute(pickupCoordinates, dropoffCoordinates) {
            if (routeLayer) {
                map.removeLayer('route');
                map.removeSource('route');
            }

            const apiUrl = `https://api.tomtom.com/routing/1/calculateRoute/${pickupCoordinates.lat},${pickupCoordinates.lon}:${dropoffCoordinates.lat},${dropoffCoordinates.lon}/json?key=${apiKey}`;

            try {
                const response = await fetch(apiUrl);
                const data = await response.json();

                console.log('TomTom API Response:', data);

                if (!data.routes || data.routes.length === 0 || !data.routes[0].legs || data.routes[0].legs.length === 0 || !data.routes[0].legs[0].points || data.routes[0].legs[0].points.length === 0) {
                    alert('Route not found');
                    throw new Error('Route not found');
                }

                const route = data.routes[0].legs[0].points.map(point => [point.longitude, point.latitude]);

                const geojson = {
                    type: 'Feature',
                    geometry: {
                        type: 'LineString',
                        coordinates: route
                    }
                };

                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: geojson
                    },
                    paint: {
                        'line-color': 'black',
                        'line-width': 4
                    }
                });

                const bounds = new tt.LngLatBounds();
                route.forEach(point => bounds.extend(point));
                map.fitBounds(bounds);

            } catch (error) {
                console.error('Error fetching or parsing route data:', error);
                alert('Error fetching or parsing route data. Please try again.');
            }
        }

        async function getCoordinates(location) {
            console.log('hiii');
            console.log(encodeURIComponent(location, "encode uri"));
            const response = await fetch(`https://api.tomtom.com/search/2/search/${encodeURIComponent(location)}.json?key=${apiKey}`);
            const data = await response.json();
            if (data.results && data.results.length > 0) {
                return data.results[0].position;
            } else {
                alert('Location not found');
                throw new Error('Location not found');
            }
        }

        async function sendLocation(pickupCoordinates) {
            console.log(pickupCoordinates, "pickupcoordinates");

            try {
                console.log("sugiiiiiiiii");

                const response = await axios.post('/riderlocation', pickupCoordinates, { withCredentials: true });

                console.log(response?.data, "gotNearByDriver's");

                if (response?.data && response.data.length > 0) {
                    showPopup(response.data);
                } else {
                    alert('No cars available at the moment.');
                }

                response?.data.map(async (val) => {
                    let latitude = val.pickupCoordinates.coordinates[1];
                    let longitude = val.pickupCoordinates.coordinates[0];
                    await setDefaultTaxiConfig([longitude, latitude]);
                });

            } catch (err) {
                console.error(err);
            }

            console.log({ pickupCoordinates });
        }
        console.log('hello');

        function showPopup(cars) {
            console.log("pirai anna");
            const carList = document.getElementById('carList');
            carList.innerHTML = ''; 
            cars.forEach(car => {
                const listItem = document.createElement('li');
                listItem.textContent = `Car ID:${car.id}  Rate: ${car.status}`;
                carList.appendChild(listItem);
            });

            document.getElementById('overlay').style.display = 'block';
            document.getElementById('carPopup').style.display = 'block';
        }

        function closePopup() {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('carPopup').style.display = 'none';
        }

        function createMarker(coordinates, label) {
            const marker = new tt.Marker().setLngLat([coordinates.lon, coordinates.lat]).addTo(map);
            if (label) {
                const popup = new tt.Popup({ offset: 35 }).setText(label);
                marker.setPopup(popup).togglePopup();
            }
            return marker;
        }

        function createTaxi(name, coordinates, iconFilePath, iconWidth = 55, iconHeight = 55) {
            console.log(8999);
            return {
                name: name,
                icon: `<img src="${iconFilePath}" style="width: ${iconWidth}px; height: ${iconHeight}px;">`,
                coordinates: coordinates,
            };
        }

        async function setDefaultTaxiConfig(checkCoordinates) {
            console.log('--->oii selfie<---');
            taxiConfig = [
                createTaxi("CAR #1", checkCoordinates, "https://tse1.mm.bing.net/th?id=OIP.lAk3L_5K4s3pNevnpEePCAHaEu&pid=Api&P=0&h=180"),
            ];

            taxiConfig.forEach(function (taxi) {
                const carMarkerElement = document.createElement("div");
                carMarkerElement.innerHTML = taxi.icon;
                new tt.Marker({ element: carMarkerElement, offset: [0, 27] })
                    .setLngLat(taxi.coordinates)
                    .addTo(map);
            });
        }
    </script>
</body>
</html>
